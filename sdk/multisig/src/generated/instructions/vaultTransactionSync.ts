/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  VaultTransactionSyncArgs,
  vaultTransactionSyncArgsBeet,
} from '../types/VaultTransactionSyncArgs'

/**
 * @category Instructions
 * @category VaultTransactionSync
 * @category generated
 */
export type VaultTransactionSyncInstructionArgs = {
  args: VaultTransactionSyncArgs
}
/**
 * @category Instructions
 * @category VaultTransactionSync
 * @category generated
 */
export const vaultTransactionSyncStruct = new beet.FixableBeetArgsStruct<
  VaultTransactionSyncInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', vaultTransactionSyncArgsBeet],
  ],
  'VaultTransactionSyncInstructionArgs'
)
/**
 * Accounts required by the _vaultTransactionSync_ instruction
 *
 * @property [] multisig
 * @category Instructions
 * @category VaultTransactionSync
 * @category generated
 */
export type VaultTransactionSyncInstructionAccounts = {
  multisig: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const vaultTransactionSyncInstructionDiscriminator = [
  229, 34, 195, 222, 173, 112, 76, 84,
]

/**
 * Creates a _VaultTransactionSync_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category VaultTransactionSync
 * @category generated
 */
export function createVaultTransactionSyncInstruction(
  accounts: VaultTransactionSyncInstructionAccounts,
  args: VaultTransactionSyncInstructionArgs,
  programId = new web3.PublicKey('SMRTe6bnZAgJmXt9aJin7XgAzDn1XMHGNy95QATyzpk')
) {
  const [data] = vaultTransactionSyncStruct.serialize({
    instructionDiscriminator: vaultTransactionSyncInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.multisig,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
